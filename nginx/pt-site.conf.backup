# PT站 Nginx 生产环境配置
# 用于生产部署时替换pt-site.conf

# 上游后端服务器配置（生产环境可能有多个实例）
upstream pt_backend {
    server 127.0.0.1:3001 weight=3 max_fails=3 fail_timeout=30s;
    # server 127.0.0.1:3002 weight=2 max_fails=3 fail_timeout=30s;
    # server 127.0.0.1:3003 backup;
    keepalive 64;
}

# 限流配置（生产环境更严格）
limit_req_zone $binary_remote_addr zone=api:20m rate=20r/s;
limit_req_zone $binary_remote_addr zone=tracker:20m rate=5r/s;
limit_req_zone $binary_remote_addr zone=general:20m rate=10r/s;
limit_req_zone $binary_remote_addr zone=upload:10m rate=1r/m;
limit_req_zone $binary_remote_addr zone=admin:10m rate=1r/s;

# 缓存配置
proxy_cache_path /tmp/nginx-cache levels=1:2 keys_zone=pt_cache:10m max_size=1g inactive=60m use_temp_path=off;

# HTTP服务器（重定向到HTTPS）
server {
    listen 80;
    server_name your-domain.com www.your-domain.com;
    return 301 https://$server_name$request_uri;
}

# HTTPS服务器（主要配置）
server {
    listen 443 ssl http2;
    server_name your-domain.com www.your-domain.com;
    
    # SSL证书配置
    ssl_certificate /path/to/your/fullchain.pem;
    ssl_certificate_key /path/to/your/privkey.pem;
    ssl_trusted_certificate /path/to/your/chain.pem;
    
    # SSL安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # 安全头设置
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self';" always;
    
    # 请求大小限制
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # 隐藏服务器版本
    server_tokens off;
    
    # 前端静态文件（生产环境）
    location / {
        root /home/runner/work/node-private-tracker/node-private-tracker/frontend/build;  # 修改为实际构建路径
        try_files $uri $uri/ /index.html;
        
        # 静态资源缓存策略
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            gzip_static on;
            
            # 预压缩文件支持
            location ~* \.js$ {
                gzip_static on;
                add_header Content-Encoding gzip;
            }
        }
        
        # HTML文件不缓存
        location ~* \.html$ {
            expires 0;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma no-cache;
        }
        
        # 压缩设置
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_comp_level 6;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    }
    
    # API路由代理
    location /api {
        limit_req zone=api burst=50 nodelay;
        limit_req_status 429;
        
        proxy_pass http://pt_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # 缓存配置（选择性缓存）
        proxy_cache pt_cache;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_valid 200 302 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_bypass $cookie_nocache $arg_nocache;
        proxy_cache_lock on;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        add_header X-Cache-Status $upstream_cache_status;
        
        # 超时设置
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 错误处理
        proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 30s;
        
        # 健康检查
        proxy_intercept_errors on;
    }
    
    # Tracker服务（PT站核心）
    location ~ ^/(announce|tracker) {
        limit_req zone=tracker burst=10 nodelay;
        
        # 严格的BitTorrent客户端检查
        set $allowed_agent 0;
        if ($http_user_agent ~* "(BitTorrent|uTorrent|qBittorrent|Transmission|Deluge|rtorrent|libtorrent|Azureus|BitComet|BiglyBT|Tixati|FrostWire)") {
            set $allowed_agent 1;
        }
        if ($allowed_agent = 0) {
            return 403 "Only authorized BitTorrent clients are allowed";
        }
        
        # 阻止恶意请求
        if ($args !~ "info_hash=") {
            return 400 "Bad Request: Missing info_hash";
        }
        
        proxy_pass http://pt_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Tracker优化设置
        proxy_buffering off;
        proxy_read_timeout 30s;
        proxy_send_timeout 30s;
        proxy_connect_timeout 5s;
        
        # 禁用缓存（Tracker响应是动态的）
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        expires -1;
        
        # 访问日志（用于分析）
        access_log logs/tracker_access.log combined;
    }
    
    # 文件上传（特殊处理）
    location /api/torrents/upload {
        limit_req zone=upload burst=1 nodelay;
        
        # 大文件上传配置
        client_max_body_size 100M;
        client_body_buffer_size 128k;
        client_body_timeout 300s;
        
        proxy_pass http://pt_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 上传优化
        proxy_connect_timeout 10s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_request_buffering off;
        proxy_buffering off;
        
        # 禁用缓存
        proxy_cache off;
    }
    
    # 管理员API（额外安全）
    location /api/admin {
        limit_req zone=admin burst=10 nodelay;
        
        # IP白名单（可选）
        # allow 192.168.1.0/24;
        # allow 10.0.0.0/8;
        # deny all;
        
        # 管理员会话检查
        proxy_pass http://pt_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 禁用缓存
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        
        # 访问日志
        access_log logs/admin_access.log combined;
    }
    
    # 文件下载（高效静态文件服务）
    location /uploads {
        alias /home/runner/work/node-private-tracker/node-private-tracker/backend/uploads/;  # 修改为实际路径
        
        # 性能优化
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        
        # 下载速度限制（可选）
        # limit_rate 1024k;  # 1MB/s per connection
        
        # 文件类型特定缓存
        location ~* \.(torrent)$ {
            expires 1h;
            add_header Cache-Control "private, no-transform";
            add_header Content-Type "application/x-bittorrent";
        }
        
        location ~* \.(jpg|jpeg|png|gif)$ {
            expires 7d;
            add_header Cache-Control "public, no-transform";
        }
        
        # 访问控制（可选）
        # valid_referers none blocked server_names;
        # if ($invalid_referer) {
        #     return 403;
        # }
        
        access_log off;
    }
    
    # 健康检查
    location /health {
        proxy_pass http://pt_backend;
        proxy_cache off;
        access_log off;
        
        # 快速失败
        proxy_connect_timeout 3s;
        proxy_send_timeout 3s;
        proxy_read_timeout 3s;
    }
    
    # WebSocket支持（如果需要）
    location /ws {
        proxy_pass http://pt_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 阻止访问敏感文件和目录
    location ~ /\.(env|git|sql|log|htaccess)$ {
        deny all;
        return 404;
    }
    
    location ~ /(node_modules|\.git|\.vscode|database\.sqlite|src|config) {
        deny all;
        return 404;
    }
    
    # 机器人和搜索引擎管理
    location /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /api/\nDisallow: /admin/\nDisallow: /tracker/\nDisallow: /announce\nDisallow: /uploads/\n\n# Allow only specific crawlers for main content\nUser-agent: Googlebot\nAllow: /\nDisallow: /api/\n";
    }
    
    location /sitemap.xml {
        add_header Content-Type application/xml;
        return 200 '<?xml version="1.0" encoding="UTF-8"?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"><url><loc>https://your-domain.com/</loc><changefreq>daily</changefreq><priority>1.0</priority></url></urlset>';
    }
    
    # 自定义错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /home/runner/work/node-private-tracker/node-private-tracker/frontend/build;
    }
    
    location = /404.html {
        root /home/runner/work/node-private-tracker/node-private-tracker/frontend/build;
    }
    
    # 日志配置
    access_log logs/pt_access.log combined;
    error_log logs/pt_error.log warn;
}

# 监控和状态页面（仅内网访问）
server {
    listen 127.0.0.1:8080;
    server_name localhost;
    
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
    
    location /upstream_status {
        proxy_pass http://pt_backend/health;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
}
